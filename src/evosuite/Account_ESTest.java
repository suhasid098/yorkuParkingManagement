/*
 * This file was automatically generated by EvoSuite
 * Mon Apr 10 03:20:56 GMT 2023
 */

package evosuite;

import org.junit.Test;
import static org.junit.Assert.*;
import objects.Manager;
import objects.SuperManager;
import objects.User;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class Account_ESTest extends Account_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Manager manager0 = new Manager("n", (-1), "n");
      manager0.getPassword();
      assertEquals((-1), manager0.getId());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SuperManager superManager0 = new SuperManager("", 419, "");
      superManager0.getPassword();
      assertEquals(419, superManager0.getId());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SuperManager superManager0 = new SuperManager("#^Ag)DTI541P'uJu", 1445, "#^Ag)DTI541P'uJu");
      superManager0.getName();
      assertEquals(1445, superManager0.getId());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      User user0 = new User();
      user0.setName("");
      String string0 = user0.getName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Manager manager0 = new Manager("Non-Faculty", 2332, "Non-Faculty");
      int int0 = manager0.getId();
      assertEquals(2332, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      User user0 = new User("a3*]'XM/aR%", (-1916), (String) null, (String) null, "a3*]'XM/aR%");
      int int0 = user0.getId();
      assertEquals((-1916), int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      User user0 = new User();
      String string0 = user0.getName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      User user0 = new User();
      int int0 = user0.getId();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      User user0 = new User();
      user0.setId(0);
      assertEquals(0, user0.getId());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      User user0 = new User();
      String string0 = user0.getPassword();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      User user0 = new User();
      user0.setPassword((String) null);
      assertNull(user0.getLotName());
  }
}
