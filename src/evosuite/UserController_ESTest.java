/*
 * This file was automatically generated by EvoSuite
 * Mon Apr 10 03:15:05 GMT 2023
 */

package evosuite;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import controllers.UserController;
import java.time.LocalDateTime;
import java.util.ArrayList;
import objects.User;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockLocalDateTime;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class UserController_ESTest extends UserController_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      // Undeclared exception!
      try { 
        UserController.addPlateNumber("y!6oR2K", "HLu 9h<jLH@(/5{S");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("controllers.UserController", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      UserController.isSpotTaken("336", "m");
      UserController.load();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      // Undeclared exception!
      try { 
        UserController.removeParkingLot();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("controllers.UserController", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      // Undeclared exception!
      try { 
        UserController.registerUser("oo<u", (String) null, (String) null, "^Kq77%bc#I", "^Kq77%bc#I");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      // Undeclared exception!
      try { 
        UserController.denyUser((User) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("controllers.UserController", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      // Undeclared exception!
      try { 
        UserController.checkEmail((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = UserController.checkEmail("com.csvreader.CsvReader");
      assertEquals("Email invalid.", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = UserController.checkEmail(" \"KEs)S1|k&@yTn9mp");
      assertEquals("Email invalid.", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      User user0 = UserController.getLoggedInUser();
      assertNull(user0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      // Undeclared exception!
      try { 
        UserController.addPlateNumber("lW", "lW");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("controllers.UserController", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = UserController.addPlateNumber("model.MaintainUser", "name_on_card");
      assertEquals("Invalid plate number", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = UserController.addPlateNumber("i}", "");
      assertEquals("Valid plate number", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = UserController.addPlateNumber("", "");
      assertEquals("Invalid plate number", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        UserController.addParkingSpot("", "xDu9ZH?/`mv(ru~");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("controllers.UserController", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      User user0 = new User();
      user0.setApproved(true);
      boolean boolean0 = UserController.denyUser(user0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      User user0 = new User("email", (-1), "email", "y!Qw@)rxD[rB'nMz`O", " G&sc65\"z3q0ZGNk{");
      boolean boolean0 = UserController.denyUser(user0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      User user0 = new User();
      boolean boolean0 = UserController.approveUser(user0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ArrayList<User> arrayList0 = UserController.getApprovedUsers();
      assertEquals(0, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ArrayList<User> arrayList0 = UserController.getUnapprovedUsers();
      assertTrue(arrayList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String string0 = UserController.registerUser("y!Qw@)rxD[rB'nMz`O", "y!Qw@)rxD[rB'nMz`O", "email", "", "");
      assertEquals("Email invalid.", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String string0 = UserController.logInUser(".", ".");
      assertEquals("Email not registered.", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      UserController.load();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      // Undeclared exception!
      try { 
        UserController.setPaymentType("CoW/*wvrN1:e|,~6I");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("controllers.UserController", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      UserController.clearUsers();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      // Undeclared exception!
      try { 
        UserController.getType();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("controllers.UserController", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      // Undeclared exception!
      try { 
        UserController.extendTime(0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("controllers.UserController", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      // Undeclared exception!
      try { 
        UserController.getRefundAmount();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("controllers.UserController", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      UserController.clear();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      UserController userController0 = new UserController();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      UserController.logOutUser();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ArrayList<User> arrayList0 = UserController.getUsers();
      assertTrue(arrayList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      // Undeclared exception!
      try { 
        UserController.checkoutInfo("[W}p`miZQ9_", "mz:HZgTKwD", ">UV##tV#DX*", ">UV##tV#DX*", 0, localDateTime0, localDateTime0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("controllers.UserController", e);
      }
  }
}
